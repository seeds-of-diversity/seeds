<?php

// Run this from the command line in this directory: (php getcreds.php) and follow the instructions. It will write a file into ~/.credentials

if( !defined( "SEEDROOT" ) ) {
    define( "SEEDROOT", "../../" );
    define( "SEED_APP_BOOT_REQUIRED", true );
    include_once( SEEDROOT."seedConfig.php" );
}

include( SEEDROOT."seedlib/SEEDGoogleService.php" );


//if( !SEED_isCLI )  die('This application must be run on the command line.');


$raGoogleConfig = [
    'application_name' => "Google API SEEDS",

    // If modifying these scopes, regenerate the credentials at ~/seed_config/calendar-php-quickstart.json
    'scopes' => implode(' ', [Google_Service_Calendar::CALENDAR_READONLY,
                              Google_Service_Calendar::CALENDAR
                             ]),

    // Downloaded from the Google API Console
    'client_secret_file' => SEEDCONFIG_DIR."google_client_secret.json",

    // Generated by this script
    'credentials_file' => SEEDCONFIG_DIR."calendar-php-quickstart.json",
];




/**
 * Expands the home directory alias '~' to the full path.
 * @param string $path the path to expand.
 * @return string the expanded path.
 */
function expandHomeDirectory($path) {
  $homeDirectory = getenv('HOME');
  if (empty($homeDirectory)) {
    $homeDirectory = getenv('HOMEDRIVE') . getenv('HOMEPATH');
  }
  return str_replace('~', realpath($homeDirectory), $path);
}

class googleAPISetup
{
    static function output( $s )
    {
        if( SEED_isCLI ) {
            $s = str_replace( ["<h2>","</h2>","<br/>"], ["** "," **\n","\n"], $s );
            print( $s );
        } else {
            echo $s."<br/>";
        }
    }
}




googleAPISetup::output( "<h2>Google API Setup</h2>" );


if( !file_exists($raGoogleConfig['client_secret_file']) ) {
    googleAPISetup::output(
        "You need a Client Secret File. <br/>
         1. Go to https://console.developers.google.com <br/>
         2. Create a project and enable the needed API(s) if necessary <br/>
         3. In Credentials, create an id for OAuth 2.0 Client <br/>
         4. Download the json file for that OAuth 2.0 credential to {$raGoogleConfig['client_secret_file']} <br/>
         5. Refresh this page <br/>"
        );
    exit;
}

$oG = new SEEDGoogleService( $raGoogleConfig, false );   // don't create the Google_Client because the credentials file isn't there yet
//if( !$oG->client ) die( "Could not create Google Client" );
$oG->GetCredentials( true );

$service = new Google_Service_Calendar($oG->client);

// Print the next 10 events on the user's calendar.
$calendarId = 'primary';
$optParams = array(
  'maxResults' => 10,
  'orderBy' => 'startTime',
  'singleEvents' => TRUE,
  'timeMin' => date('c'),
);
$results = $service->events->listEvents($calendarId, $optParams);

if (count($results->getItems()) == 0) {
  print "No upcoming events found.\n";
} else {
  print "Upcoming events:\n";
  foreach ($results->getItems() as $event) {
    $start = $event->start->dateTime;
    if (empty($start)) {
      $start = $event->start->date;
    }
    printf("%s (%s)\n", $event->getSummary(), $start);
  }
}
